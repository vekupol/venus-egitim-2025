useEffect(() => {
  const fetchData = async () => {
    try {
      const classRef = collection(db, 'classes');
      const query = firestoreQuery(classRef, where('classUid', '==', classAddedClassUid));
      const classQuerySnapshot = await getDocs(query);

      if (!classQuerySnapshot.empty) {
        const classDoc = classQuerySnapshot.docs[0];
        const userDocData = classDoc.data();
        const allStudents = userDocData.students || [];
        setClassData(userDocData);
        setAllStudents(allStudents);

        let totalDoneHomeworks = 0;

        for (const uid of allStudents.map(user => user.uid)) {
          const userDocRef = doc(db, 'users', uid);
          const userDocSnap = await getDoc(userDocRef);

          if (userDocSnap.exists()) {
            const userData = userDocSnap.data();
            const userHomeworks = userData.homeworks || [];
            
            const doneHomeworkCount = userHomeworks.filter(homework => homework.bittiMi === 1).length;
            totalDoneHomeworks += doneHomeworkCount;
          }
        }

        setDonePeople(totalDoneHomeworks);
        setTotalPeople(allStudents.length);
      }

      const homeworksRef = collection(db, 'homeworks');
      const homeworksQuery = firestoreQuery(homeworksRef, where('classUid', '==', classAddedClassUid));
      const homeworksQuerySnapshot = await getDocs(homeworksQuery);

      if (!homeworksQuerySnapshot.empty) {
        const homeworksData = homeworksQuerySnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id }));
        setClassHomework(homeworksData);
      }
    } catch (error) {
      console.error('Veri getirme hatasÄ±:', error);
    }
  };

  fetchData();
}, [classAddedClassUid]);
